// => Installion 

    - npm install gsap @gsap/react
    - npm install react-responsive 


----------------------------------------------

// => How can we animate vd with our scroll scurb-base animation 
    
    - onloadedmetadata ( it's a built-in video event from the HTML5 <video> element.)
        -Fires when the browser has loaded metadata for the video:
                duration
                video dimensions
                tracks (if any) 

    - currentTime is a property of the <video> element. 

    =>   tl.to(videoRef.current, {
            currentTime: videoRef.current.duration
        }); 
        ***"Animate the currentTime of the video from the beginning (0) to the end (duration) as the user scrolls."


    =>  How GSAP work 

        - currentTime Is Not a GSAP Default Property  ( ❌ currentTime is not a GSAP "standard" property like x, rotation, etc.) 
        - ✅ GSAP can animate any numeric property on any JavaScript object — including HTMLMediaElement.currentTime.
        ** That' why  currentTime is a number and GSAP is powerful enough to animate any numeric value over time (or scroll).


----------------------------------------------

// => Something we have to care about When we make video scurb-base animation 

    =>   Why Scroll-based Video Feels Choppy 

        🔧 Problem:
            Most .mp4 videos are compressed and only store full images (called keyframes, or I-frames) every few seconds.
            The frames in between are P-frames/B-frames, which depend on previous frames.
            So when you scroll to a non-keyframe, the browser has to decode many frames to find the right one — which is slow and choppy. 

        🎯 Solution: Re-encode the video with every frame as a keyframe
            This makes the video scrubbable frame-by-frame, perfect for scroll-based playback.
            And yes, FFmpeg is the tool to do this. 

        sudo apt update -y 
        sudo apt install ffmpeg 
        ffmpeg -version  (July 17, 2025 -> v6.1.1) 

        cd project 
        cd public/videos 

        **chose one
        ffmpeg -i input.mp4 -g 1 -c:v libx264 -preset fast -crf 18 -an output.mp4
        ffmpeg -i input.mp4 -vf scale=960:-1 -movflags faststart -vcodec libx264 -crf 20 -g 1 -pix_fmt yuv420p test.mp4

| Flag           | Meaning                                               |
| -------------- | ----------------------------------------------------- |
| `-i input.mp4` | Your original video                                   |
| `-g 1`         | GOP size = 1 → force a **keyframe on every frame**    |
| `-c:v libx264` | Use H.264 codec                                       |
| `-preset fast` | Speed vs file size tradeoff                           |
| `-crf 18`      | Quality (lower = better, 18 is good)                  |
| `-an`          | No audio (optional, often unneeded for scroll videos) |
| `output.mp4`   | The new optimized file                                |





